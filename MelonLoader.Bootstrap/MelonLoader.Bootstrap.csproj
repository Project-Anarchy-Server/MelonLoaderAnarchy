<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <PublishAot>true</PublishAot>
        <SelfContained>true</SelfContained>
        <PublishDir>$(MLOutDir)</PublishDir>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <NoWarn>LNK4099</NoWarn>
        <InvariantGlobalization>true</InvariantGlobalization>
    </PropertyGroup>

    <PropertyGroup Condition="'$(RuntimeIdentifier.StartsWith(`linux-`))' == 'true'">
        <ExportsFile>linuxexports.def</ExportsFile>
        <LinkStandardCPlusPlusLibrary>true</LinkStandardCPlusPlusLibrary>
    </PropertyGroup>
    <PropertyGroup Condition="'$(RuntimeIdentifier.StartsWith(`osx-`))' == 'true'">
        <ExportsFile>osxexports.def</ExportsFile>
        <OSXEntryPath>Deps/$(RuntimeIdentifier)/osxentry.o</OSXEntryPath>
        <LinkStandardCPlusPlusLibrary>true</LinkStandardCPlusPlusLibrary>
    </PropertyGroup>
    
    <Target Condition="'$(RuntimeIdentifier.StartsWith(`osx-`))' == 'true'" Name="BuildOSXEntry" BeforeTargets="Build">
        <Exec Command="g++ -c -O2 -fPIC OSXEntry/osxentry.cpp -o $(OSXEntryPath)" />
    </Target>

    <ItemGroup Condition="'$(RuntimeIdentifier.StartsWith(`win-`))' == 'true'">
        <LinkerArg Include="/DEF:Exports.def" />
    </ItemGroup>

    <PropertyGroup Condition="'$(Configuration)' != 'Debug'">
        <DebugSymbols>false</DebugSymbols>
        <DebugType>none</DebugType>
    </PropertyGroup>

    <ItemGroup>
        <None Include="../BaseLibs/NetStandardPatches/*" CopyToOutputDirectory="PreserveNewest" Link="MelonLoader/Dependencies/NetStandardPatches/%(RecursiveDir)%(Filename)%(Extension)" />
        <None Include="$(SolutionDir)/NOTICE.txt" CopyToOutputDirectory="PreserveNewest" Link="MelonLoader/Documentation/%(Filename)%(Extension)" />
        <None Include="$(SolutionDir)/LICENSE.md" CopyToOutputDirectory="PreserveNewest" Link="MelonLoader/Documentation/%(Filename)%(Extension)" />
        <None Include="$(SolutionDir)/CHANGELOG.md" CopyToOutputDirectory="PreserveNewest" Link="MelonLoader/Documentation/%(Filename)%(Extension)" />
        <None Include="$(SolutionDir)/README.md" CopyToOutputDirectory="PreserveNewest" Link="MelonLoader/Documentation/%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <EmbeddedResource Include="TrimmerRoots.xml">
            <LogicalName>ILLink.Descriptors.xml</LogicalName>
        </EmbeddedResource>
    </ItemGroup>

    <PropertyGroup>
        <AppHostVersion>9.0.0</AppHostVersion>
        <AppHostPath>$(NuGetPackageRoot)runtime.$(RuntimeIdentifier).microsoft.netcore.dotnetapphost/$(AppHostVersion)/runtimes/$(RuntimeIdentifier)/native/libnethost$(LibExt)</AppHostPath>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.NETCore.DotNetAppHost" Version="$(AppHostVersion)" PrivateAssets="All" />
        <PackageReference Include="Pastel" Version="6.0.1" />
        <PackageReference Include="Samboy063.Tomlet" Version="6.0.0" />
    </ItemGroup>

    <ItemGroup>
        <Compile Include="$(SolutionDir)/MelonLoader/LoaderConfig.cs" />
    </ItemGroup>

    <ItemGroup Condition="'$(RuntimeIdentifier.StartsWith(`osx-`))' == 'true'">
        <NativeLibrary Include="$(OSXEntryPath)" />
    </ItemGroup>
    
    <ItemGroup>
        <NativeLibrary Include="$(AppHostPath)" />
        <NativeLibrary Include="Deps/$(RuntimeIdentifier)/$(LibPrefix)dobby$(LibExt)" />
        <NativeLibrary Include="Deps/$(RuntimeIdentifier)/$(LibPrefix)plthook$(LibExt)" />
    </ItemGroup>

    <!-- For some reasons, the linux export file .NET auto generate after compilation contains a hardcoded
         version being "V1.0". This is bad for us because it means every symbols we export will have "@@V1.0"
         appended. Our entrypoint on linux REQUIRES to expose "__libc_start_main" without any version suffix.
         To workaround this, we can remove the string in the file before linking, but after compile -->
    <Target Name="Replace" BeforeTargets="LinkNative" DependsOnTargets="IlcCompile">
        <WriteLinesToFile File="$(ExportsFile)"
                          Lines="$([System.IO.File]::ReadAllText($(ExportsFile)).Replace('V1.0',''))"
                          Overwrite="true"/>
    </Target>

    <Target Name="PublishAsBuildAfterTarget" AfterTargets="Build" DependsOnTargets="Publish" />

    <Target Condition="'$(RuntimeIdentifier.StartsWith(`win-`))' == 'true'" Name="RenameBinary" AfterTargets="Build">
        <Move SourceFiles="$(PublishDir)/$(TargetName).dll" DestinationFiles="$(PublishDir)/version.dll" />
    </Target>
</Project>
